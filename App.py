#--------------------------------------------------------------------------------------------
#  –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import streamlit as st
import pandas as pd
from PIL import Image
import plotly.express as px
import re
import os
# from docx import Document
# from docx.shared import Inches
import tempfile
import subprocess
# import win32com.client
# import tempfile
# import magic
# import openpyxl
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#  –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
st.title(" üìä Project Productivity Professional ")
#10903493.png
image = Image.open("10903493.png")
new_size = (30, 30)
resized_image = image.resize(new_size)
st.image(image, caption='', use_column_width=True)
# st.markdown("---")
st.write('')
# st.sidebar.title('***üìä–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—åüìä***')
# st.sidebar.markdown("---")
image = Image.open("Pie_Chart.webp")
new_size = (300, 300)
resized_image = image.resize(new_size)
st.sidebar.image(image, caption='', use_column_width=True)
st.sidebar.markdown("---")
st.sidebar.title("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è—á–µ–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Pandas Styler
pd.set_option("styler.render.max_elements", 559776)
new_size = (300, 300)
resized_image = image.resize(new_size)
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
if st.sidebar.checkbox("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"):
    # st.sidebar.markdown("---")
    selected_dashboards = st.multiselect("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ü—Ä–æ–µ–∫—Ç–∞", ["–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"])
    show_fields = st.checkbox("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ ")
    inputs = {}  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if show_fields:
        for dashboard_option in selected_dashboards:
            if dashboard_option == "–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏":
                inputs["–ù–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ–µ–∫—Ç–∞"] = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ–µ–∫—Ç–∞", value="")
                inputs["–ê–¥—Ä–∏—Å –ü—Ä–æ–µ–∫—Ç–∞"] = st.text_input("–ê–¥—Ä–∏—Å –ü—Ä–æ–µ–∫—Ç–∞", value="")
                inputs["–í–∏–¥ —Ä–∞–±–æ—Ç"] = st.text_input("–í–∏–¥ —Ä–∞–±–æ—Ç", value="")
                inputs["–ì–µ–Ω–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫"] = st.text_input("–ì–µ–Ω–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤—â–∏–∫", value="")
                inputs["–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞"] = st.text_input("–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", value="")
                inputs["–ó–∞–∫–∞—á–∏–∫"] = st.text_input("–ó–∞–∫–∞—á–∏–∫", value="")
                inputs["–°—Ç–∞–¥–∏—è –ø—Ä–æ–µ–∫—Ç–∞"] = st.text_input("–°—Ç–∞–¥–∏—è –ü—Ä–æ–µ–∫—Ç–∞", value="")
                inputs["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –û–±—ä–µ–∫—Ç–∞"] = st.text_input("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –û–±—ä–µ–∫—Ç–∞", value="")
                inputs["–ù–æ–º–µ—Ä –ì–ü–ó–£"] = st.text_input("–ù–æ–º–µ—Ä –ì–ü–ó–£", value="")
                inputs["–≠—Ç–∞–∂–Ω–æ—Å—Ç—å"] = st.text_input("–≠—Ç–∞–∂–Ω–æ—Å—Ç—å", value="")
                inputs["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–∞–¥–∑–µ–º–Ω—ã—Ö –≠—Ç–∞–∂–µ–π"] = st.text_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ù–∞–¥–∑–µ–º–Ω—ã—Ö –≠—Ç–∞–∂–µ–π", value="")
                inputs["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–æ–¥–∑–µ–º–Ω—ã—Ö –≠—Ç–∞–∂–µ–π"] = st.text_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–æ–¥–∑–µ–º–Ω—ã—Ö –≠—Ç–∞–∂–µ–π", value="")
                inputs["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π"] = st.text_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π", value="")
                inputs["–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∑–¥–∞–Ω–∏—è m¬≤"] = st.text_input("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∑–¥–∞–Ω–∏—è m¬≤ ", value="")
                inputs["–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –û–±—ä–µ–º m¬≥"] = st.text_input("–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –û–±—ä–µ–º m¬≥", value="")  
                inputs["–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞"] = st.text_input("–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞", value="")
                inputs["–ü–æ–ª–µ–∑–Ω–∞—è –ø–ª–æ—â–∞–¥—å"] = st.text_input("–ü–æ–ª–µ–∑–Ω–∞—è –ø–ª–æ—â–∞–¥—å", value="")
    if len(inputs) > 0:  # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        st.write("***–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ü—Ä–æ–µ–∫—Ç–∞:***")
        with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
            df = pd.DataFrame(inputs.items(), columns=['–ò–º—è –∞—Ç—Ä–∏–±—É—Ç–∞', '–û–ø–∏—Å–∞–Ω–∏–µ'])
           
          
            # st.write(df) 
            st.dataframe(df, width=600)
        




#-------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
#--------------------------------------------------------------------------------------------------------------------------------------------------
# –ö–Ω–æ–ø–∫–∏ "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏" –∏ "–ì—Ä–∞—Ñ–∏–∫" –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è
st.markdown("---")
st.sidebar.markdown("---")
st.sidebar.title("–†–∞—Å—á–µ—Ç —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç–∏")
show_upload_button = st.sidebar.checkbox("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏")
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
show_dashboard = st.sidebar.checkbox("–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
# st.sidebar.markdown("---")
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞
if show_upload_button:
    image = Image.open("business___team_man_woman_working_together_partner_3d_people_person_service2x.webp")
    st.sidebar.image(image, caption='', use_column_width=True)
    st.write('')
    uploaded_files = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ (Log file)", type=['log'])  # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ Log
    if uploaded_files is not None:
        image = Image.open("77.webp")
        new_size = (30, 30)
        resized_image = image.resize(new_size)
        st.sidebar.image(image, caption='', use_column_width=True)  
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ Log
        log_content = uploaded_files.readlines()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å—Ç—Ä–æ–∫–∏
        lines = [line.decode().strip() for line in log_content]

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –∏ —É–¥–∞–ª–∏—Ç–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        lines = [line.strip() for line in lines if line.strip()]

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç—ã
        data = [line.split('|')[:2] for line in lines if '|' in line]

        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        df = pd.DataFrame(data, columns=['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'])
        show_upload_button = st.sidebar.checkbox("–û–±—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª")
        if show_upload_button:
          st.write('–û–±—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª')
          st.dataframe(df, width=600)
          # st.write(df)
          st.markdown("---")
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫ –∏–º–µ–Ω–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pattern = re.compile(r'^[–ê-–Ø–∞-—è]+\s[–ê-–Ø–∞-—è]+$|^\w+\s\w+$')  
        df = df[df['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'].apply(lambda x: bool(pattern.match(x.strip())))]  
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ '–î–∞—Ç–∞' –∏ '–≤—Ä–µ–º—è' –≤ –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü '–û–±—â–µ–µ –≤—Ä–µ–º—è'
        df['–û–±—â–µ–µ –≤—Ä–µ–º—è'] = pd.to_datetime(df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'], errors='coerce')
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–æ–ª–±—Ü—É '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'
        grouped_data = df.groupby('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞)
        results = []
        cleaned_results = []

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–≤–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ < 30 –º–∏–Ω—É—Ç)
        for name, group in grouped_data:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_diffs = group['–û–±—â–µ–µ –≤—Ä–µ–º—è'].diff().fillna(pd.Timedelta(seconds=0))

            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            time_diffs = time_diffs[time_diffs >= pd.Timedelta(seconds=0)]

            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            total_time_seconds = time_diffs.sum().total_seconds()

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
            days, remainder = divmod(total_time_seconds, 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            formatted_time = f"{int(days)} days, {int(hours)} hours, {int(minutes)} minute, {int(seconds)} seconds"

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
            results.append({'–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏': name, '–í—Ä–µ–º—è': formatted_time})

            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç
            time_diffs = time_diffs[time_diffs <= pd.Timedelta(minutes=30)]

            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
            total_time_seconds = time_diffs.sum().total_seconds()

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã
            days, remainder = divmod(total_time_seconds, 86400)
            hours, remainder = divmod(remainder, 3600)
            minutes, seconds = divmod(remainder, 60)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            formatted_time = f"{int(days)} days, {int(hours)} hours, {int(minutes)} minute, {int(seconds)} seconds"

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫
            cleaned_results.append({'–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏': name, '–í—Ä–µ–º—è': formatted_time})
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞
        results_df = pd.DataFrame(results)
        cleaned_results_df = pd.DataFrame(cleaned_results)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü
        # st.write('–¢—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:')
        # st.write(results_df)
        st.write('–¢—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ < 30 –º–∏–Ω—É—Ç):')
        # st.write(cleaned_results_df)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã"
        def calculate_total_hours(row):
            time_parts = row['–í—Ä–µ–º—è'].split(', ')
            total_hours = 0
            total_minutes = 0
            for part in time_parts:
                value, unit = part.split(' ')
                if unit == 'days':
                    total_hours += int(value) * 24
                elif unit == 'hours':
                    total_hours += int(value)
                elif unit == 'minute':
                    total_minutes += int(value)
            total_hours += total_minutes // 60
            total_minutes %= 60
            return f"{total_hours} hours, {total_minutes} minutes"

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–æ–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
        cleaned_results_df['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤'] = cleaned_results_df.apply(calculate_total_hours, axis=1)

        # –í—ã–≤–æ–¥–∏–º DataFrame —Å –Ω–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–æ–º
        st.write(cleaned_results_df)
        image = Image.open("workflow_workspace___office_3d_people_person_team_working_together_work_teamwork2x.webp")
        new_size = (30, 30)
        resized_image = image.resize(new_size)
        st.image(image, caption='', use_column_width=True)
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if show_dashboard:
            st.markdown("---")
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            developers = cleaned_results_df['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'].unique()

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            selected_developers = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", developers)

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            if selected_developers:
                filtered_data = cleaned_results_df[cleaned_results_df['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'].isin(selected_developers)]
                for developer in selected_developers:
                    st.write(f"–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è {developer}:")
                    st.write(filtered_data[filtered_data['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'] == developer])
                                  
#-----------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
show_chart_button = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")
# st.markdown("---")
if show_chart_button:
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
    chart_type = st.sidebar.radio("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ ", ("–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–¥–∏–∞–≥—Ä–∞–º–º–∞"))

    if chart_type == "–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        bar_data = results_df.copy()
        bar_data['–í—Ä–µ–º—è'] = pd.to_timedelta(bar_data['–í—Ä–µ–º—è']).dt.total_seconds() / 3600

        # –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–æ–ª–±—á–∞—Ç—É—é –®—Ç–∞–±–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –û–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        # fig_bar = px.bar(bar_data, x='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏', y='–í—Ä–µ–º—è', title='–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')
        # # –ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
        # st.plotly_chart(fig_bar)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ç–æ—Ä–æ–π –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        cleaned_bar_data = cleaned_results_df.copy()
        cleaned_bar_data['–í—Ä–µ–º—è'] = pd.to_timedelta(cleaned_bar_data['–í—Ä–µ–º—è']).dt.total_seconds() / 3600

        # –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç–æ–ª–±—á–∞—Ç—É—é –®—Ç–∞–±–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –û–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ < 30 –º–∏–Ω—É—Ç)
        fig_cleaned_bar = px.bar(cleaned_bar_data, x='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏', y='–í—Ä–µ–º—è', title='–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ < 30 –º–∏–Ω—É—Ç)')
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
        st.plotly_chart(fig_cleaned_bar)

    elif chart_type == "–¥–∏–∞–≥—Ä–∞–º–º–∞":
        # –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_data = results_df.copy()
        pie_data['–í—Ä–µ–º—è'] = pd.to_timedelta(pie_data['–í—Ä–µ–º—è']).dt.total_seconds()

        # –°–æ–∑–¥–∞–π—Ç–µ –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –û–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        fig_pie = px.pie(pie_data, values='–í—Ä–µ–º—è', names='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏', title='–¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')
        # –ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –∫—Ä—É–≥–æ–≤–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
        fig_pie.update_traces(hole=0.3)
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        # st.plotly_chart(fig_pie)

        # –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        pie_cleaned_data = cleaned_results_df.copy()
        pie_cleaned_data['–í—Ä–µ–º—è'] = pd.to_timedelta(pie_cleaned_data['–í—Ä–µ–º—è']).dt.total_seconds()

        # –°–æ–∑–¥–∞–π—Ç–µ –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –û–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ < 30 –º–∏–Ω—É—Ç)
        fig_cleaned_pie = px.pie(pie_cleaned_data, values='–í—Ä–µ–º—è', names='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏', title='–¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞ < 30 –º–∏–Ω—É—Ç)')
        # –ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ –∫—Ä—É–≥–æ–≤–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
        fig_cleaned_pie.update_traces(hole=0.3)
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        st.plotly_chart(fig_cleaned_pie)
        # st.markdown("---")       
#------------------------------------------------------------------------------------------------------------------------------------      
#------------------------------------------------------------------------------------------------------------------------------------      
#------------------------------------------------------------------------------------------------------------------------------------          
# –†–∞—Å—á–µ—Ç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤    
st.sidebar.markdown("---")      
st.sidebar.title("–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
if st.sidebar.checkbox("—ç–ª–µ–º–µ–Ω—Ç–æ–≤"):
    uploaded_files = st.sidebar.file_uploader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", type=['csv'], accept_multiple_files=True, key='file_uploader', help="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã .csv")
    image = Image.open("csv1.webp")
    new_size = (30, 30)
    resized_image = image.resize(new_size)
    st.sidebar.image(image, caption='', use_column_width=True)

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
    if uploaded_files is not None:
        
        all_data = []
        total_sum_all_files = 0  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        
        for file in uploaded_files:
            df = pd.read_csv(file)
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
            if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' not in df.columns:
                df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = 1
            sum_values = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
            total_sum_all_files += sum_values  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            file_name = file.name.split('.')[0]  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            data = {
                '–≠–ª–µ–º–µ–Ω—Ç': [file_name],
                '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': [sum_values]
            }
            df_result = pd.DataFrame(data)
            all_data.append(df_result)
            
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É
        if len(all_data) > 0:
            combined_df = pd.concat(all_data, ignore_index=True)
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–∏–Ω —Ä–∞–∑
            total_df = pd.DataFrame({'–≠–ª–µ–º–µ–Ω—Ç': ['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'], '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': [total_sum_all_files]})
            
            # –î–æ–±–∞–≤–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É
            combined_df = pd.concat([combined_df, total_df], ignore_index=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            st.write('–ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:')
            st.write(combined_df)
            # –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–∞–π–ª–µ Word
            # if st.button("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–∞–π–ª Word"):
            #     # –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª Word –∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–µ–≥–æ —Ç–∞–±–ª–∏—Ü—É
            #     document = Document()
                
            #    # –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
            #     document.add_picture('–£—Ä—Ñ—É.jpg', width=Inches(1.0), height=Inches(1.0))
                
            #     document.add_heading('–¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤', level=1)

            #     # –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
            #     table = document.add_table(rows=combined_df.shape[0]+1, cols=combined_df.shape[1])
            #     # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            #     for j in range(combined_df.shape[-1]):
            #         table.cell(0, j).text = combined_df.columns[j]
            #     # –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            #     for i in range(combined_df.shape[0]):
            #         for j in range(combined_df.shape[-1]):
            #             table.cell(i+1, j).text = str(combined_df.iloc[i,j])

            #     # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª
            #     document.save('—Ç–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.docx')
            #     st.success("–¢–∞–±–ª–∏—Ü–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ Word.")               
#----------------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------------
#  –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
#----------------------------------------------------------------------------------------------------------------------------------
# –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
if st.sidebar.checkbox("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"):
    uploaded_files = st.sidebar.file_uploader("–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤ CSV", type=['csv'], accept_multiple_files=True)  # –∫–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–æ–≤ CSV
    

    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    selected_files = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", [file.name for file in uploaded_files] if uploaded_files else [])

    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    for selected_file_name in selected_files:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª
        if selected_file_name and uploaded_files:
            st.write(f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è: {selected_file_name}")

            # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            selected_file_path = [file for file in uploaded_files if file.name == selected_file_name][0]

            # —á—Ç–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–≥–æ –≤ DataFrame
            selected_df = pd.read_csv(selected_file_path)

            # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ multiselect –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            selected_columns = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", selected_df.columns)

            # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            if selected_columns:
                st.write(selected_df[selected_columns])
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ "
st.sidebar.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")

if st.sidebar.checkbox("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"):
  st.sidebar.write("-  –≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π –Ω–æ–º–µ—Ä 32 .")
  st.sidebar.write("-  (–ì–ª–∞–≤–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä) -–ú–∞—à–∫–∏–Ω –û–ª–µ–≥ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á inbox@omashkin.ru ")
  st.sidebar.write("- (–¢–∏–º–ª–∏–¥) - –ë–∞–¥—Ä–∏ –•–∞–∑–µ–º –•–µ—à–∞–º –ú—É—Ö–∞–º–º–µ–¥ hazim20001@icloud.Com")       
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã "Renga Api"
if st.sidebar.checkbox("Renga Api"):
    st.sidebar.image("renga.png", width=80, use_column_width=False)
    st.sidebar.markdown("[–û—Ç–∫—Ä—ã—Ç—å](https://help.rengabim.com/api/)")
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------
# # #–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª Renga.rnp
# if st.sidebar.checkbox("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª Renga.rnp"):
#     uploaded_file = st.sidebar.file_uploader("–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ Renga", type=["rnp"])
#     if uploaded_file is not None:
#         # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
#         temp_dir = tempfile.mkdtemp()
        
#         # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
#         file_path = os.path.join(temp_dir, uploaded_file.name)
#         with open(file_path, "wb") as f:
#             f.write(uploaded_file.getbuffer())
        
#         # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
#         try:
#             subprocess.Popen(["xdg-open", file_path])  # –î–ª—è Linux
#         except FileNotFoundError:
#             try:
#                 subprocess.Popen(["open", file_path])  # –î–ª—è macOS
#             except FileNotFoundError:
#                 os.startfile(file_path)  # –î–ª—è Windows
        
#         st.sidebar.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç!")
#-----------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
#                ('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä') 
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
show_calculator = st.sidebar.checkbox('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
# –ï—Å–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç, –ø–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ
if show_calculator:
    # –í—ã–±–æ—Ä –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –æ–ø–µ—Ä–∞—Ü–∏—é', ['–°–ª–æ–∂–µ–Ω–∏–µ (+)', '–í—ã—á–∏—Ç–∞–Ω–∏–µ (-)', '–£–º–Ω–æ–∂–µ–Ω–∏–µ (*)', '–î–µ–ª–µ–Ω–∏–µ (/)', '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å (‚àö)', '–ö—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å (‚àõ)'])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–ª–∏ –∫—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å, –ø–æ–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —á–∏—Å–ª–∞
    if operation in ['–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å (‚àö)', '–ö—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å (‚àõ)']:
        num1 = st.sidebar.number_input('–ß–∏—Å–ª–æ', step=1.0)
        num2 = None
    else:
        num1 = st.sidebar.number_input('–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ')
        num2 = st.sidebar.number_input('–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ')

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    if st.sidebar.button('–í—ã—á–∏—Å–ª–∏—Ç—å'):
        if operation == '–°–ª–æ–∂–µ–Ω–∏–µ (+)':
            result = num1 + num2
            st.sidebar.success(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è: {result}')
        elif operation == '–í—ã—á–∏—Ç–∞–Ω–∏–µ (-)':
            result = num1 - num2
            st.sidebar.success(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è: {result}')
        elif operation == '–£–º–Ω–æ–∂–µ–Ω–∏–µ (*)':
            result = num1 * num2
            st.sidebar.success(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è: {result}')
        elif operation == '–î–µ–ª–µ–Ω–∏–µ (/)':
            if num2 != 0:
                result = num1 / num2
                st.sidebar.success(f'–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è: {result}')
            else:
                st.sidebar.error('–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è')
        elif operation == '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å (‚àö)':
            result = num1 ** 0.5
            st.sidebar.success(f'–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ {num1}: {result}')
        elif operation == '–ö—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å (‚àõ)':
            result = num1 ** (1/3)
            st.sidebar.success(f'–ö—É–±–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–µ–Ω—å –∏–∑ {num1}: {result}')
#-----------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------

#       # ----=-----–ü—É—Ç—å –∫ –∂—É—Ä–Ω–∞–ª—É   -------


# # Function to handle importing RNP files
# def import_rnp(file_buffer, app):
#     if file_buffer is not None:
#         # Save the uploaded file to a temporary location
#         file_path = tempfile.NamedTemporaryFile(delete=False).name
#         with open(file_path, "wb") as f:
#             f.write(file_buffer.getvalue())

#         # Check if the temporary file exists
#         if os.path.exists(file_path):
#             # Check if the file is a Renga project file
#             file_type = magic.Magic(mime=True).from_file(file_path)
#             if file_type == 'application/octet-stream':
#                 st.error("Invalid file format. Please upload a valid Renga project file.")
#                 return

#             # Open the Renga project
#             app.OpenProject(file_path)
#             project = app.Project
#             if project is not None:
#                 model = project.Model
#                 # Create a DataFrame with project information
#                 data = {
#                     "Attribute": ["–ü—É—Ç—å –∫ –∂—É—Ä–Ω–∞–ª—É"],
#                     "Value": [project.JournalPath]
#                 }
#                 df = pd.DataFrame(data)
#                 # Display project information in a table
#                 st.write(df)
#             else:
#                 st.error("Failed to open the Renga project.")
#         else:
#             st.error("Failed to upload the file.")

# # Create a Renga application instance
# app = win32com.client.Dispatch("Renga.Application.1")

# # Make the Renga application visible
# app.Visible = True

# # Create a Streamlit sidebar button
# if st.sidebar.checkbox("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∂—É—Ä–Ω–∞–ª .Log"):
#     # Inside the checkbox, create a Streamlit file uploader widget
#     uploaded_file = st.sidebar.file_uploader("Upload RNP file", type=["rnp"])
#     # If file is uploaded, call import_rnp function
#     if uploaded_file is not None:
#         import_rnp(uploaded_file, app)


#-----------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–ª–∞–∂–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è –∫–Ω–æ–ø–∫–∏
st.markdown("---")
if st.sidebar.checkbox("–°–ø—Ä–∞–≤–∫–∞"):
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É
    with st.expander("–°–ø—Ä–∞–≤–∫–∞:"):
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è –∫–Ω–æ–ø–∫–∏
        st.write('–ö–∞–∫—É—é –ø–æ–ª—å–∑—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ?:')
        st.write("- 1-–ù–∞–ø–∏—Å–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        st.write("- 2-–†–∞—Å—á–µ—Ç —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç–∏")
        st.write("- 3-–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        st.write("- 4-–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        st.write("- 5-–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        st.write("- 6-–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª Renga.RNP")
        st.write("- 7-–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É.LOG")
        st.write("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞?:")
        st.write("- 1-–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∂—É—Ä–Ω–∞–ª–∞.LOG (–î–ª—è-–†–∞—Å—á–µ—Ç —Ç—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç–∏)")
        st.write("- 2-–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv (–î–ª—è-–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        st.write("- 3-–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv (–î–ª—è-–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        st.write("- 4-–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .rnp (–î–ª—è-–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª Renga)")
        st.write("- 5-–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .rnp (–î–ª—è-–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∂—É—Ä–Ω–∞–ª .Log)")
        image = Image.open("Management.webp")
        new_size = (30, 30)
        resized_image = image.resize(new_size)
        st.sidebar.image(image, caption='', use_column_width=True)
        
        
        
#-----------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------

 

 
